#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>

&mt {
    flavor = "balanced";
    quick-tap-ms = <150>;//for double tap backspace to repeat
    tapping-term-ms = <200>;
    require-prior-idle-ms = <120>;//higher value makes hold harder to trigger, cause it forces a tap instead if within this time. if correct with backspace, we may want a shift/mod so we set this to lowish
};

/ {
    combos {
        compatible = "zmk,combos";

        caps_word {
            bindings = <&caps_word>;
            key-positions = <6 7>;
            layers = <0>;
        };

        esc {
            bindings = <&kp ESCAPE>;
            key-positions = <16 17>;
            layers = <0>;
        };

        del {
            bindings = <&kp DEL>;
            key-positions = <26 27>;
            layers = <0>;
        };

        cmd_v {
            bindings = <&kp LG(V)>;
            key-positions = <13 23>;
            layers = <0>;
        };

        esc2 {
            bindings = <&kp ESC>;
            key-positions = <0 1>;
            layers = <0>;
        };
    };

    macros {
        dot_shift: dot_shift {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOT &kp SPACE &sk LEFT_SHIFT>;
            label = "DOT_SHIFT";
        };
    };

    behaviors {
        no_idle: no_idle {
            compatible = "zmk,behavior-hold-tap";
            label = "NO_IDLE";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <(-1)>;
            flavor = "balanced";
        };

        dotques: dotques {
            compatible = "zmk,behavior-mod-morph";
            label = "DOTQUES";
            bindings = <&kp PERIOD>, <&kp QUESTION>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        colemak {
            bindings = <
&kp Q                  &kp W        &kp F       &kp P           &kp B    &kp J  &kp L       &kp U       &kp Y        &kp SEMI
&no_idle LEFT_SHIFT A  &mt LCTRL R  &mt LALT S  &mt LEFT_GUI T  &kp G    &kp M  &mt RGUI N  &mt RALT E  &mt RCTRL I  &no_idle RIGHT_SHIFT O
&kp Z                  &kp X        &kp C       &kp D           &kp V    &kp K  &kp H       &kp COMMA   &dotques     &kp SINGLE_QUOTE
&lt 3 TAB              &lt 1 SPACE                                                                      &lt 2 ENTER  &mt LEFT_SHIFT BACKSPACE
            >;
        };

        symbols {
            bindings = <
&kp GRAVE            &kp TILDE         &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp AMPS         &kp PLUS   &kp N7  &kp N8  &kp N9  &kp ASTERISK
&mt LSHFT LESS_THAN  &kp GREATER_THAN  &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp PIPE         &kp MINUS  &kp N4  &kp N5  &kp N6  &kp DOUBLE_QUOTES
&dot_shift           &kp UNDERSCORE    &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp BACKSLASH    &kp EQUAL  &kp N1  &kp N2  &kp N3  &kp SLASH
&to 0                &trans                                                                                                     &kp N0  &mt DOT BSPC
            >;
        };

        nav {
            bindings = <
&none           &kp F7               &kp F8           &kp F9           &kp F10    &none  &kp HOME   &kp UP     &kp END    &kp PAGE_UP
&kp LEFT_SHIFT  &mt LEFT_CONTROL F4  &mt LEFT_ALT F5  &mt LEFT_GUI F6  &kp F11    &none  &kp LEFT   &kp DOWN   &kp RIGHT  &kp PAGE_DOWN
&none           &kp F1               &kp F2           &kp F3           &kp F12    &none  &mkp LCLK  &kp K_APP  &mkp RCLK  &tog 1
&none           &none                                                                                          &trans     &none
            >;
        };

        sys {
            bindings = <
&sys_reset  &bt BT_CLR_ALL  &none  &none  &none    &kp C_VOLUME_UP    &kp C_NEXT        &none  &none   &none
&none       &bt BT_NXT      &none  &none  &none    &kp C_VOLUME_DOWN  &kp C_PREV        &none  &none   &none
&none       &none           &none  &none  &none    &kp C_MUTE         &kp C_PLAY_PAUSE  &none  &none   &to 4
&none       &trans                                                                             &trans  &none
            >;
        };

        game {
            bindings = <
&kp ESC    &kp Q      &kp W  &kp E  &kp R    &kp T  &kp Y  &kp U  &kp I      &kp O
&kp LSHFT  &kp A      &kp S  &kp D  &kp F    &kp G  &kp H  &kp J  &kp K      &kp L
&kp LCTRL  &kp Z      &kp X  &kp C  &kp V    &kp B  &kp N  &kp M  &kp COMMA  &to 0
&kp TAB    &kp SPACE                                              &kp ENTER  &kp LALT
            >;
        };
    };
};
