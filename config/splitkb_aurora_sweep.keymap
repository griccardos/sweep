/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>

&mt {
    //  flavor = "tap-preferred";
    // tapping-term-ms = <200>;

    flavor = "balanced";
    quick-tap-ms = <200>;
};

/ {
    combos {
        compatible = "zmk,combos";

        caps_word {
            bindings = <&caps_word>;
            key-positions = <10 19>;
        };

        esc {
            bindings = <&kp ESCAPE>;
            key-positions = <16 17>;
        };

        game1 {
            bindings = <&kp NUMBER_1>;
            key-positions = <0 30>;
            layers = <4>;
        };

        game2 {
            bindings = <&kp NUMBER_2>;
            key-positions = <1 30>;
            layers = <4>;
        };

        game3 {
            bindings = <&kp NUMBER_3>;
            key-positions = <2 30>;
            layers = <4>;
        };
    };

    macros {
        rustarrow: rustarrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp GT>;
            label = "RUSTARROW";
        };
    };

    behaviors {
        tab_esc: tab_esc {
            compatible = "zmk,behavior-tap-dance";
            label = "TAB_ESC";
            #binding-cells = <0>;
            bindings = <&kp TAB>, <&kp ESCAPE>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&mt ESCAPE Q      &kp W           &kp E        &kp R            &kp T    &kp Y  &kp U            &kp I        &kp O           &kp P
&mt LEFT_SHIFT A  &mt LEFT_ALT S  &mt LCTRL D  &mt LEFT_META F  &kp G    &kp H  &mt LEFT_META J  &mt RCTRL K  &mt LEFT_ALT L  &mt RIGHT_SHIFT SEMICOLON
&kp Z             &kp X           &kp C        &kp V            &kp B    &kp N  &kp M            &kp COMMA    &kp DOT         &kp APOS
&kp TAB           &lt 1 SPACE                                                                                 &lt 2 ENTER     &kp BACKSPACE
            >;
        };

        left_layer {
            bindings = <
&none           &none           &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp AMPS           &kp PLUS   &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp ASTERISK
&kp LEFT_SHIFT  &kp QUESTION    &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp PIPE           &kp MINUS  &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp SLASH
&kp DEL         &kp UNDERSCORE  &kp LEFT_BRACE        &kp RIGHT_BRACE        &mt TILDE GRAVE    &kp EQUAL  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp BACKSLASH
&none           &trans                                                                                                                 &mo 3         &kp NUMBER_0
            >;
        };

        right_layer {
            bindings = <
&none           &kp F7           &kp F8        &kp F9           &kp F10    &kp PAGE_UP    &kp HOME   &kp UP_ARROW  &kp END    &none
&kp LEFT_SHIFT  &mt LEFT_ALT F4  &mt LCTRL F5  &mt LEFT_GUI F6  &kp F11    &kp PAGE_DOWN  &kp LEFT   &kp DOWN      &kp RIGHT  &kp RIGHT_SHIFT
&none           &kp F1           &kp F2        &kp F3           &kp F12    &kp DEL        &mkp LCLK  &kp K_APP     &mkp RCLK  &none
&none           &mo 3                                                                                              &trans     &none
            >;
        };

        tri_layer {
            bindings = <
&sys_reset  &none   &none  &none  &to 4    &kp C_VOLUME_UP    &kp C_NEXT        &none  &none   &none
&none       &none   &none  &none  &none    &kp C_VOLUME_DOWN  &kp C_PREV        &none  &none   &none
&none       &none   &none  &none  &none    &kp C_MUTE         &kp C_PLAY_PAUSE  &none  &none   &none
&none       &trans                                                                     &trans  &none
            >;
        };

        gaming {
            bindings = <
&tab_esc   &kp Q      &kp W  &kp E  &kp R    &trans  &trans  &trans  &trans  &trans
&kp TAB    &kp A      &kp S  &kp D  &kp F    &trans  &trans  &trans  &trans  &trans
&kp LCTRL  &kp Z      &kp X  &kp C  &kp V    &trans  &trans  &trans  &trans  &trans
&kp ENTER  &kp SPACE                                                 &to 0   &trans
            >;
        };
    };
};
